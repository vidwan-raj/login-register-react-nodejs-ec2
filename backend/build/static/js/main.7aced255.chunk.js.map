{"version":3,"sources":["stores/UserStore.js","components/form/inputField.js","components/form/SubmitButton.js","components/form/LoginForm.js","components/form/RegistrationForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","isRegistered","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","a","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","disable","doLogin","to","style","fontSize","color","RegistrationForm","firstName","lastName","email","doRegister","App","doLogout","exact","path","component","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7aced255.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\";\n\n\nclass UserStore {\n    constructor(){\n        extendObservable(this, {\n            loading : true,\n            isLoggedIn : false,\n            username :'',\n            isRegistered : false\n        })\n    }\n}\n\nexport default new UserStore();","import React from \"react\";\n\nclass InputField extends React.Component {\n  render () {\n    return (\n        <div className = \"inputField\">\n                <input className='input' \n                      type = {this.props.type}\n                      placeholder = {this.props.placeholder}\n                      value = {this.props.value}\n                      onChange = {(e) => this.props.onChange(e.target.value)}/>\n        </div>\n    );\n  }\n}\n\nexport default InputField;","import React from \"react\";\n\nclass SubmitButton extends React.Component {\n  render () {\n    return (\n        <div className = \"submitButton\">\n            <button className = 'btn' \n            type = \"submit\"\n            disabled = {this.props.disabled}\n            onClick = { () => this.props.onClick()}>\n                {this.props.text}\n\n            </button>\n        </div>\n    );\n  }\n}\n\nexport default SubmitButton;","import React from \"react\";\nimport InputField from \"./inputField\";\nimport SubmitButton from \"./SubmitButton\";\nimport UserStore from \"../../stores/UserStore\";\nimport { Link } from \"react-router-dom\";\n\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    }\n  }\n\n  \n  setInputValue(property, val){\n    val = val.trim();\n    if(val.length > 12){\n      return;\n    }\n    this.setState({\n      [property] : val\n    })\n  }\n\n  resetForm(){\n    this.setState ({\n      username :'',\n      password : '',\n      buttonDisabled : false\n    })\n  }\n\n  async doLogin() {\n    if(!this.state.username){\n      return;\n    }\n\n    if(!this.state.password){\n      return;\n    }\n\n    this.setState({\n      buttonDisabled : true\n    })\n\n    try{\n       let res = await fetch('/login', {\n         method : 'POST',\n         headers : {\n           'Accept' : 'application/json',\n           'Content-Type' : 'application/json'\n         },\n        body : JSON.stringify({ username :  this.state.username, password : this.state.password })\n       });\n       let result = await res.json();\n\n       if(result && result.success){\n         UserStore.isLoggedIn = true;\n         UserStore.username = result.username;\n       }else if(result && result.success === false){\n         this.resetForm();\n         alert(result.msg);\n       }\n    }catch(e){\n        console.log(e);\n        this.resetForm();\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"LoginForm\">\n        Log in\n        <InputField type='text'\n          placeholder='username'\n          value={this.state.username ? this.state.username : ''}\n          onChange={(val) => this.setInputValue('username', val)} />\n\n        <InputField type='password'\n          placeholder='password'\n          value={this.state.password ? this.state.password : ''}\n          onChange={(val) => this.setInputValue('password', val)} />\n        <SubmitButton text='Login'\n          disable={this.state.buttonDisabled}\n          onClick={() => this.doLogin()} />\n          <Link to=\"/Register\" style = {{fontSize : 20 ,  color:'white'}}> Not a User? Create an account</Link>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;","import React from \"react\";\nimport UserStore from \"../../stores/UserStore\";\nimport InputField from \"./inputField\";\nimport { Link } from \"react-router-dom\";\nimport SubmitButton from \"./SubmitButton\";\n\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val){\n        val = val.trim();\n        \n        this.setState({\n          [property] : val\n        })\n      }\n\n      resetForm(){\n        this.setState ({\n            username: '',\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n        })\n      }\n\n    async doRegister() {\n        if (!this.state.username) {\n            return;\n        }\n        if (!this.state.password) {\n            return;\n        }\n\n        try {\n            let res = await fetch('/Register', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({username : this.state.username,\n                    password : this.state.password,\n                    firstName : this.state.firstName,\n                    lastName : this.state.lastName,\n                    email: this.state.email})\n            });\n           \n            let result = await res.json();\n\n            if(result && result.success){\n                alert('Registerd Succesfully , your username is ' + this.state.username + 'and password is '+ this.state.password);\n                this.resetForm();\n            }else if( result && result.success === false){\n                this.resetForm();\n                alert(result.msg);\n            }\n        } catch (e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"RegistrationForm\">\n                Register\n                <InputField type='text'\n                    placeholder='username'\n                    value={this.state.username ? this.state.username : ''}\n                    onChange={(val) => this.setInputValue('username', val)} />\n                <InputField type='text'\n                    placeholder='First Name'\n                    value={this.state.firstName ? this.state.firstName : ''}\n                    onChange={(val) => this.setInputValue('firstName', val)} />\n\n                <InputField type='text'\n                    placeholder='Last Name'\n                    value={this.state.lastName ? this.state.lastName : ''}\n                    onChange={(val) => this.setInputValue('lastName', val)} />\n\n                <InputField type='text'\n                    placeholder='Email'\n                    value={this.state.email ? this.state.email : ''}\n                    onChange={(val) => this.setInputValue('email', val)} />\n\n                <InputField type='password'\n                    placeholder='password'\n                    value={this.state.password ? this.state.password : ''}\n                    onChange={(val) => this.setInputValue('password', val)} />\n\n\n                <SubmitButton text='Register'\n                    onClick={() => this.doRegister()} />\n                <Link to=\"/\" style = {{fontSize : 20 ,  color:'white'}}> Login Here</Link>    \n            </div>);\n    }\n}\n\nexport default RegistrationForm;","import React from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore';\nimport LoginForm from './components/form/LoginForm';\nimport SubmitButton from './components/form/SubmitButton';\nimport { Route, Switch } from 'react-router';\nimport './App.css';\nimport RegistrationForm from './components/form/RegistrationForm';\n\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n    try {\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n\n      } else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n\n      }\n    }\n    catch (e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n\n  async doLogout() {\n    try {\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n\n      }\n    }\n    catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    if (UserStore.loading) {\n      return (\n        <div className=\"App\">\n          <div className='container'>\n            Loading, Please wait..\n          </div>\n        </div>\n      );\n    }else{\n      console.log(UserStore.isLoggedIn);\n      if(UserStore.isLoggedIn){\n        return (\n          <div className=\"App\">\n            <div className='container'>\n              Welcome {UserStore.username}\n              <SubmitButton text = {'Log out'}\n                disabled = {false}\n                onClick = {() => this.doLogout()} />\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"App\">\n          <div className='container'>\n            <Switch>\n            <Route exact path = '/' component = {LoginForm} />\n            <Route exact path = '/Register' component = {RegistrationForm} />\n            </Switch>\n          </div>\n        </div>\n      );\n    }\n    \n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n\t\t<BrowserRouter>  <App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}